#!/bin/bash

# üöÄ Render.com Deployment Script
# Bu script Render deployment √∂ncesi kontrolleri yapar

echo "üîç Render.com Deployment Kontrol√º Ba≈ülatƒ±lƒ±yor..."

# Renk kodlarƒ±
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Gerekli dosyalarƒ± kontrol et
echo -e "${BLUE}üìÅ Gerekli dosyalar kontrol ediliyor...${NC}"

required_files=(
    "render.yaml"
    "Dockerfile"
    "src/main/resources/application-prod.yml"
    "pom.xml"
)

for file in "${required_files[@]}"; do
    if [ -f "$file" ]; then
        echo -e "${GREEN}‚úÖ $file mevcut${NC}"
    else
        echo -e "${RED}‚ùå $file eksik!${NC}"
        exit 1
    fi
done

# Maven build test
echo -e "${BLUE}üî® Maven build test ediliyor...${NC}"
if command -v mvn &> /dev/null; then
    echo "Maven s√ºr√ºm√º: $(mvn -version | head -n 1)"
    
    # Test build (dependencies check)
    echo "Dependencies kontrol ediliyor..."
    mvn dependency:resolve -q
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Maven dependencies OK${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Maven dependencies sorun olabilir${NC}"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  Maven bulunamadƒ±, build test atlanƒ±yor${NC}"
fi

# GitHub token kontrol√º
echo -e "${BLUE}üîë GitHub Token kontrol√º...${NC}"
if [ -z "$GITHUB_TOKEN" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  GITHUB_TOKEN environment variable set edilmemi≈ü${NC}"
    echo -e "${YELLOW}   Render Dashboard'dan manuel eklemeyi unutmayƒ±n!${NC}"
else
    echo -e "${GREEN}‚úÖ GITHUB_TOKEN set edilmi≈ü${NC}"
fi

# Application properties kontrol√º
echo -e "${BLUE}‚öôÔ∏è  Application properties kontrol√º...${NC}"
prod_props="src/main/resources/application-prod.yml"

if grep -q "DATABASE_URL" "$prod_props"; then
    echo -e "${GREEN}‚úÖ Database URL konfig√ºrasyonu OK${NC}"
else
    echo -e "${RED}‚ùå DATABASE_URL konfig√ºrasyonu eksik!${NC}"
fi

if grep -q "JWT_SECRET" "$prod_props"; then
    echo -e "${GREEN}‚úÖ JWT Secret konfig√ºrasyonu OK${NC}"
else
    echo -e "${RED}‚ùå JWT_SECRET konfig√ºrasyonu eksik!${NC}"
fi

# Render.yaml validation
echo -e "${BLUE}üìã render.yaml validation...${NC}"
if grep -q "aslaw-backend" "render.yaml"; then
    echo -e "${GREEN}‚úÖ Service name OK${NC}"
else
    echo -e "${RED}‚ùå Service name eksik!${NC}"
fi

if grep -q "aslaw-db" "render.yaml"; then
    echo -e "${GREEN}‚úÖ Database name OK${NC}"
else
    echo -e "${RED}‚ùå Database name eksik!${NC}"
fi

# Port kontrol√º
echo -e "${BLUE}üåê Port konfig√ºrasyonu...${NC}"
if grep -q "PORT:8080" "$prod_props"; then
    echo -e "${GREEN}‚úÖ Port konfig√ºrasyonu OK${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  PORT environment variable konfig√ºrasyonu kontrol edin${NC}"
fi

# Dockerfile kontrol√º
echo -e "${BLUE}üê≥ Dockerfile kontrol√º...${NC}"
if grep -q "GITHUB_TOKEN" "Dockerfile"; then
    echo -e "${GREEN}‚úÖ GitHub authentication OK${NC}"
else
    echo -e "${RED}‚ùå GitHub authentication eksik!${NC}"
fi

if grep -q "actuator/health" "Dockerfile"; then
    echo -e "${GREEN}‚úÖ Health check OK${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Health check konfig√ºrasyonu kontrol edin${NC}"
fi

echo ""
echo -e "${BLUE}üìã DEPLOYMENT CHECKLIST:${NC}"
echo ""
echo "üîß RENDER DASHBOARD'DA YAPILACAKLAR:"
echo "   1. GitHub Token ekle: GITHUB_TOKEN=ghp_xxxxxxxxxxxx"
echo "   2. Database olu≈ütur: aslaw-db (PostgreSQL)"
echo "   3. Service deploy et: Blueprint ile"
echo ""
echo "üåê DEPLOYMENT SONRASI KONTROLLER:"
echo "   ‚Ä¢ Health Check: https://your-app.onrender.com/actuator/health"
echo "   ‚Ä¢ API Docs: https://your-app.onrender.com/swagger-ui.html"
echo "   ‚Ä¢ Database: Render Dashboard ‚Üí Database ‚Üí Connect"
echo ""
echo -e "${GREEN}üöÄ Deployment i√ßin hazƒ±r! Render.com'a gidebilirsiniz.${NC}"
echo ""
echo -e "${YELLOW}üìñ Detaylƒ± rehber: RENDER-DATABASE-MANAGEMENT.md${NC}" 